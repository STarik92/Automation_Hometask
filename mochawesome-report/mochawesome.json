{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-05T17:11:37.842Z",
    "end": "2023-10-05T17:11:41.305Z",
    "duration": 3463,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e34ea33f-9120-4123-8173-2f9eb66c01d2",
      "title": "",
      "fullFile": "/Users/Taras_Sirak/Desktop/Automation_Hometask/3-rd_task_spec.js",
      "file": "/3-rd_task_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "933f3afe-d039-488b-8e98-19e7a60c24e8",
          "title": "User Creation API Tests",
          "fullFile": "/Users/Taras_Sirak/Desktop/Automation_Hometask/3-rd_task_spec.js",
          "file": "/3-rd_task_spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should allow creating a User",
              "fullTitle": "User Creation API Tests Should allow creating a User",
              "timedOut": false,
              "duration": 636,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  id: 1,\n  username: 'testuser',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john.doe@example.com',\n  password: 'password123',\n  phone: '1234567890',\n};\ntry {\n  const response = await axios.post(`${baseUrl}/user`, user);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "0e65fffa-eea8-449a-985d-aef6eae0649f",
              "parentUUID": "933f3afe-d039-488b-8e98-19e7a60c24e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should login in",
              "fullTitle": "User Creation API Tests User should login in",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logininfo = {\n    username: 'testuser',\n    password: 'password123',\n  };\n  \n  try {\n    const response = await axios.get (`${baseUrl}/user/login`, logininfo);\n    expect(response.status).to.equal(200);\n  }catch (error) {\n    throw new Error(`API request failed: ${error.message}`);\n  }",
              "err": {},
              "uuid": "2c95c10a-5c3d-4273-a404-7d1356653341",
              "parentUUID": "933f3afe-d039-488b-8e98-19e7a60c24e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow creating List of Users",
              "fullTitle": "User Creation API Tests Should allow creating List of Users",
              "timedOut": false,
              "duration": 381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userlist = [{\n  id: 1,\n  username: 'testuser',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john.doe@example.com',\n  password: 'password123',\n  phone: '1234567890',\n},\n{\n    id: 1,\n    username: 'testuser',\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@example.com',\n    password: 'password123',\n    phone: '1234567890',\n}\n];\ntry {\n  const response = await axios.post(`${baseUrl}/user/createWithList`, userlist);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "51b8a12d-044d-49f4-a111-bb236bbd9516",
              "parentUUID": "933f3afe-d039-488b-8e98-19e7a60c24e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should log out",
              "fullTitle": "User Creation API Tests User should log out",
              "timedOut": false,
              "duration": 511,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.get (`${baseUrl}/user/logout`);\n  expect(response.status).to.equal(200);\n}catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "ca54142a-93f9-493b-b614-4de6a6dd4668",
              "parentUUID": "933f3afe-d039-488b-8e98-19e7a60c24e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow creating a Pet",
              "fullTitle": "User Creation API Tests Should allow creating a Pet",
              "timedOut": false,
              "duration": 363,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petdata = {\n    id: 1,\n    category: {\n      id: 1,\n      name: \"Test_cat_name\"\n    },\n    name: \"doggie\",\n    photoUrls: [\n      \"https://www.google.com/search?q=cat+photo&sca_esv=570043172&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiz-ILBw9eBAxVkWEEAHVHXH8kQ_AUoAXoECAEQAw&biw=958&bih=939&dpr=1#imgrc=0LtKV6SSeh9FYM\"\n    ],\n    tags: [\n      {\n        id: 1,\n        name: \"tag\"\n      }\n    ],\n    status: \"available\"\n};\ntry {\n  const response = await axios.post(`${baseUrl}/pet`, petdata);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "2b6ff03f-681f-4ef1-990a-0e560a5da0dc",
              "parentUUID": "933f3afe-d039-488b-8e98-19e7a60c24e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow updating pet image",
              "fullTitle": "User Creation API Tests Should allow updating pet image",
              "timedOut": false,
              "duration": 362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatepetphoto = {\n    id: 1,\n    photoUrls: [\n      \"https://www.google.com/search?q=cat+photo&sca_esv=570043172&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiz-ILBw9eBAxVkWEEAHVHXH8kQ_AUoAXoECAEQAw&biw=958&bih=939&dpr=1#imgrc=0LtKV6SSeh9FYM\"\n    ]\n};\ntry {\n \n  const response = await axios.put(`${baseUrl}/pet`, updatepetphoto);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "9f08efc0-0903-4f04-87de-805d71f8f265",
              "parentUUID": "933f3afe-d039-488b-8e98-19e7a60c24e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow updating pet name and status",
              "fullTitle": "User Creation API Tests Should allow updating pet name and status",
              "timedOut": false,
              "duration": 479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatepetphoto = {\n    id: 1,\n    name: \"waffy\",\n    status: \"pending\"\n};\ntry {\n  const response = await axios.put(`${baseUrl}/pet`, updatepetphoto);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "48816d86-7769-457c-83de-d3ef3962c4d6",
              "parentUUID": "933f3afe-d039-488b-8e98-19e7a60c24e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow delete pet",
              "fullTitle": "User Creation API Tests Should allow delete pet",
              "timedOut": false,
              "duration": 360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petidtoDelete = 1\ntry {\n  const response = await axios.delete(`${baseUrl}/pet/${petidtoDelete}`);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "6b65473f-9c7a-4dc7-b9da-95cebd2d0989",
              "parentUUID": "933f3afe-d039-488b-8e98-19e7a60c24e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e65fffa-eea8-449a-985d-aef6eae0649f",
            "2c95c10a-5c3d-4273-a404-7d1356653341",
            "51b8a12d-044d-49f4-a111-bb236bbd9516",
            "ca54142a-93f9-493b-b614-4de6a6dd4668",
            "2b6ff03f-681f-4ef1-990a-0e560a5da0dc",
            "9f08efc0-0903-4f04-87de-805d71f8f265",
            "48816d86-7769-457c-83de-d3ef3962c4d6",
            "6b65473f-9c7a-4dc7-b9da-95cebd2d0989"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3446,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}