{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-03T06:50:05.137Z",
    "end": "2023-10-03T06:50:08.454Z",
    "duration": 3317,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "580665ef-778e-448c-b20e-8dbd8571a8d9",
      "title": "",
      "fullFile": "/Users/Taras_Sirak/Desktop/Automation_Hometask/3-rd_task_spec.js",
      "file": "/3-rd_task_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "20da76b7-fb22-4613-ae3c-50660bb478e8",
          "title": "User Creation API Tests",
          "fullFile": "/Users/Taras_Sirak/Desktop/Automation_Hometask/3-rd_task_spec.js",
          "file": "/3-rd_task_spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should allow creating a User",
              "fullTitle": "User Creation API Tests Should allow creating a User",
              "timedOut": false,
              "duration": 568,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  id: 1,\n  username: 'testuser',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john.doe@example.com',\n  password: 'password123',\n  phone: '1234567890',\n};\ntry {\n  const response = await axios.post(`${baseUrl}/user`, user);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "664da485-ec00-4896-bec0-c03d22b6f31c",
              "parentUUID": "20da76b7-fb22-4613-ae3c-50660bb478e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should login in",
              "fullTitle": "User Creation API Tests User should login in",
              "timedOut": false,
              "duration": 360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logininfo = {\n    username: 'testuser',\n    password: 'password123',\n  };\n  \n  try {\n    const response = await axios.get (`${baseUrl}/user/login`, logininfo);\n    expect(response.status).to.equal(200);\n  }catch (error) {\n    throw new Error(`API request failed: ${error.message}`);\n  }",
              "err": {},
              "uuid": "9d3b8a40-3f88-4b45-9a6b-2e3c76e33721",
              "parentUUID": "20da76b7-fb22-4613-ae3c-50660bb478e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow creating List of Users",
              "fullTitle": "User Creation API Tests Should allow creating List of Users",
              "timedOut": false,
              "duration": 347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userlist = [{\n  id: 1,\n  username: 'testuser',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john.doe@example.com',\n  password: 'password123',\n  phone: '1234567890',\n},\n{\n    id: 1,\n    username: 'testuser',\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@example.com',\n    password: 'password123',\n    phone: '1234567890',\n}\n];\ntry {\n  const response = await axios.post(`${baseUrl}/user/createWithList`, userlist);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "578de8e4-0b0c-4fda-90a4-31a46e749fe6",
              "parentUUID": "20da76b7-fb22-4613-ae3c-50660bb478e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should log out",
              "fullTitle": "User Creation API Tests User should log out",
              "timedOut": false,
              "duration": 467,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.get (`${baseUrl}/user/logout`);\n  expect(response.status).to.equal(200);\n}catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "c326d77c-1e6d-49ca-983f-bca572351a45",
              "parentUUID": "20da76b7-fb22-4613-ae3c-50660bb478e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow creating a Pet",
              "fullTitle": "User Creation API Tests Should allow creating a Pet",
              "timedOut": false,
              "duration": 356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petdata = {\n    id: 1,\n    category: {\n      id: 1,\n      name: \"Test_cat_name\"\n    },\n    name: \"doggie\",\n    photoUrls: [\n      \"https://www.google.com/search?q=cat+photo&sca_esv=570043172&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiz-ILBw9eBAxVkWEEAHVHXH8kQ_AUoAXoECAEQAw&biw=958&bih=939&dpr=1#imgrc=0LtKV6SSeh9FYM\"\n    ],\n    tags: [\n      {\n        id: 1,\n        name: \"tag\"\n      }\n    ],\n    status: \"available\"\n};\ntry {\n  const response = await axios.post(`${baseUrl}/pet`, petdata);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "1feb6d02-fb84-4a5e-b75a-7cde3f81ee38",
              "parentUUID": "20da76b7-fb22-4613-ae3c-50660bb478e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow updating pet image",
              "fullTitle": "User Creation API Tests Should allow updating pet image",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatepetphoto = {\n    id: 1,\n    photoUrls: [\n      \"https://www.google.com/search?q=cat+photo&sca_esv=570043172&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiz-ILBw9eBAxVkWEEAHVHXH8kQ_AUoAXoECAEQAw&biw=958&bih=939&dpr=1#imgrc=0LtKV6SSeh9FYM\"\n    ]\n};\ntry {\n \n  const response = await axios.put(`${baseUrl}/pet`, updatepetphoto);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "45173b7c-e868-465b-94f4-e9db1c443a28",
              "parentUUID": "20da76b7-fb22-4613-ae3c-50660bb478e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow updating pet name and status",
              "fullTitle": "User Creation API Tests Should allow updating pet name and status",
              "timedOut": false,
              "duration": 484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatepetphoto = {\n    id: 1,\n    name: \"waffy\",\n    status: \"pending\"\n};\ntry {\n  const response = await axios.put(`${baseUrl}/pet`, updatepetphoto);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "97f6f266-00a6-4c0b-bbcd-c9c1df40cb37",
              "parentUUID": "20da76b7-fb22-4613-ae3c-50660bb478e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should allow delete pet",
              "fullTitle": "User Creation API Tests Should allow delete pet",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petidtoDelete = 1\ntry {\n  const response = await axios.delete(`${baseUrl}/pet/${petidtoDelete}`);\n  expect(response.status).to.equal(200);\n} catch (error) {\n  throw new Error(`API request failed: ${error.message}`);\n}",
              "err": {},
              "uuid": "b6454b93-586f-4343-a656-96f3958fc38f",
              "parentUUID": "20da76b7-fb22-4613-ae3c-50660bb478e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "664da485-ec00-4896-bec0-c03d22b6f31c",
            "9d3b8a40-3f88-4b45-9a6b-2e3c76e33721",
            "578de8e4-0b0c-4fda-90a4-31a46e749fe6",
            "c326d77c-1e6d-49ca-983f-bca572351a45",
            "1feb6d02-fb84-4a5e-b75a-7cde3f81ee38",
            "45173b7c-e868-465b-94f4-e9db1c443a28",
            "97f6f266-00a6-4c0b-bbcd-c9c1df40cb37",
            "b6454b93-586f-4343-a656-96f3958fc38f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3294,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}